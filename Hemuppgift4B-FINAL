		ORG 0
state_vector:   FCB $5,$6,$A,$9   ; State vector
state_index:    RMB 1             ; Reserve one byte for state_index
delay_value:    RMB 1             ; Reserve one byte for delay value

start: 		ORG $20
		LDA #0
		STA state_index   ; Initialize state_index to 0

loop:           LDA $FC           ; Load the current value from $FC
		STA delay_value   ; Store the delay value in delay_value
		LDA state_index   ; Load state_index
		LDA A,X           ; Load value from state_vector into A
		STA $FC           ; Store the value back into $FC
		JSR delay         ; Call delay subroutine

delay:          PSHA              ; Save A (accumulator) to the stack
		PSHC              ; Save condition codes (CC) to the stack

		LDA delay_value   ; Load the delay value into A
delay_1:        DECA           	  ; Subtract 1 from A
		BLE end_delay
		BHI delay_1 
		

end_delay:      PULC              ; Restore condition codes (CC) from the stack
		PULA              ; Restore A (accumulator) from the stack
		JMP nextState     ; Jump to nextState

nextState:      INC state_index   ; Increment state_index
		LDA state_index   ; Load state_index
		BEQ NO_AND        ; If state_index == 0, skip the AND operation
		LDA state_index
		ANDA #$03         ; Apply bitwise AND with 0x03
		STA state_index   ; Store the result back to state_index
		LDA state_index   ; Load the updated state_index

NO_AND:         LDA state_index   ; Load state_index again
		JMP loop          ; Jump back to loop to continue execution

		ORG $FF
		FCB start         ; Program entry point
