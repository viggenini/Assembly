Inport	EQU	$FC
Utport	EQU	$FB
DelayC1	EQU	$5		;Dessa konstanter styr hur lång fördröjning Delay1s orsakar.
DelayC2	EQU	$2		;Ändra dem eventuellt i labbet så att fördröjnigen blir rimligt lång.

	ORG	$FF
	FCB	$20

	ORG	$20

Main:
	; Släcker lampan och nollställer utgången
	LDA	#$00
	STA	$FB

ReadLoop:
	; Läs ASCII-kod från inporten
	JSR	ReadASCII

	; Validera att bokstaven är inom A-Z
	CMPA	#$41	    ; A i ASCII
	BMI	ErrorSignal ; Om mindre -> fel
	CMPA	#$5A	    ; Z i ASCII
	BHI	ErrorSignal ; Om större -> fel

	; Räkna ut index i MorseCode-tabellen
	SUBA	#$41	    
	ASLA		    ; Multiplicera med 2 (2 bytes per bokstav i tabellen)

	; Hämta antalet pulser i tabellen
	LDX	#MorseCode  ; Startadress för MorseCode-tabellen
	LDA 	A,X	    ; Läs av antal pulser
	STA	Count	    ; Spara i Count

	; Hämta bitmönstret för bokstaven
	INCA		    ; Flytta till nästa byte
	LDA	A,X	    ; Läs bitmönster
	PSHA		    ; Spara bitmönster på stacken

BlinkLoop:
	; Skifta bitmönstret åt vänster för att läsa nästa bit
	ASLA
	BCC	ShortPulse  ; Om Carry = 0 -> kort puls

	; Lång puls
	LDA	#$80	    ; Sätt lång puls (bit 7 = 1)
	JSR	BlinkLight
	BRA	NextBit

ShortPulse:
	; Kort puls
	LDA 	#$00
	JSR	BlinkLight

NextBit:
	; Räkna ner Count of fortsätt om det inte är noll
	DEC	Count
	BEQ	DoneBlinking ; Om Count = 0 -> gå tillbaka till ReadLoop
	PULA		     ; Återställ bitmönstret
	PSHA		     ; Spara igen för nästa skift
	BRA	BlinkLoop

DoneBlinking:
	PULA		     ; Rensa stacken
	BRA	ReadLoop     ; Läs nästa tecken

ErrorSignal:
	; Lampan blinkar 3 gånger för felaktig inmatning
	LDA	#3
	STA	Count

ErrorBlinkLoop:
	LDA	#$FF	     ; Tänd lampan
	STA	$FB
	JSR	Delay1s

	LDA	#$00	     ; Släck lampan
	STA	$FB
	JSR	Delay1s

	DEC	Count
	BNE	ErrorBlinkLoop	; Upprepa tills Count = 0

	BRA	ReadLoop     ; Återgå till att läsa nästa tecken

	
	


ReadASCII:                                    

WAIT_0: LDA      $FC        ; Läs inporten
	BITA     #$01       ; Kontrollera bit0
	BNE      WAIT_0     ; Vänta tills bit0 = 0
                
WAIT_1: LDA      $FC        ; Läs inporten igen
	BITA     #$01       ; Kontrollera bit0
	BEQ      WAIT_1     ; Vänta tills bit0 = 1 (stigande flank)
    
	LDA      $FC        ; Läs inporten (ASCII-koden)
	RTS                    ; Retur


	
BlinkLight:
	
	PSHA            ; Spara värdet i A på stacken

	LDA 	  #$FF        ; Tänd lampan (skriv 0xFF till utporten)
	STA 	  $FB         ; $FB är utporten

	BITA 	  #$80       ; Kontrollera om bit7 är satt i A
	BEQ 	  ShortBlink ; Om bit7 är 0, hoppa till SHORT_BLINK (1s fördröjning)

LongBlink:
  
	JSR 	  Delay1s     ; Fördröjning på 1s
	JSR 	  Delay1s     ; Upprepa för totalt 4s
	JSR 	  Delay1s
	JSR 	  Delay1s
	BRA 	  EndBlink   ; Gå till att släcka lampan

ShortBlink:
   
	JSR 	  Delay1s     ; Fördröjning på 1s

EndBlink:
    
	LDA 	  #$00        ; Släck lampan (skriv 0x00 till utporten)
	STA 	  $FB         ; $FB är utporten

	JSR 	  Delay1s     ; Ytterligare fördröjning på 1s efter att lampan släckts

	PULA           	      ; Återställ värdet i A från stacken
	RTS                   ; Returnera från subrutinen

	
	
	
; Orsakar en fördröjning på ungefär 1s i simulatorn (vid snabb exekveringshastighet)
; Ändrar inga register
Delay1s:
	PSHA
	PSHX
	PSHC
	LDX	#DelayC2
Delay1s_loop2:
	LDA	#DelayC1
Delay1s_loop:
	DECA
	BNE	Delay1s_loop
	LEAX	-1,X
	CMPX	#0
	BNE	Delay1s_loop2
	PULC
	PULX
	PULA
	RTS

; Data - Variabler
Count:
	RMB	1

; Data - Konstanter
MorseCode:
	FCB	2,%01000000 ;'A'
	FCB	4,%10000000 ;'B'
	FCB	4,%10100000 ;'C'
	FCB	3,%10000000 ;'D'
	FCB	1,%00000000 ;'E'
	FCB	4,%00100000 ;'F'
	FCB	3,%11000000 ;'G'
	FCB	4,%00000000 ;'H'
	FCB	2,%00000000 ;'I'
	FCB	4,%01110000 ;'J'
	FCB	3,%10100000 ;'K'
	FCB	4,%01000000 ;'L'
	FCB	2,%11000000 ;'M'
	FCB	2,%10000000 ;'N'
	FCB	3,%11100000 ;'O'
	FCB	4,%01100000 ;'P'
	FCB	4,%11010000 ;'Q'
	FCB	3,%01000000 ;'R'
	FCB	3,%00000000 ;'S'
	FCB	1,%10000000 ;'T'
	FCB	3,%00100000 ;'U'
	FCB	4,%00010000 ;'V'
	FCB	3,%01100000 ;'W'
	FCB	4,%10010000 ;'X'
	FCB	4,%10110000 ;'Y'
	FCB	4,%11000000 ;'Z'
	
	
	
	
	
	
